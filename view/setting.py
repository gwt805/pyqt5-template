# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import static
from typing import Callable
from PyQt5.QtCore import pyqtSignal
from PyQt5 import QtCore, QtGui, QtWidgets
from components.button import TogolButton
from components.label import ElidedLabel

class UI_AppSetting(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.iconlist = []
        self.setupUi()
        self.show()

    def create_card(self, title: str):
        groupBox = QtWidgets.QGroupBox(title, self.scrollAreaWidgetContents)
        groupBox.setObjectName("groupBox")
        vlayout = QtWidgets.QVBoxLayout(groupBox)
        groupBox.setLayout(vlayout)
        vlayout.setObjectName("vlayout")
        return groupBox, vlayout

    def setupUi(self):
        self.setObjectName("AppSetting")
        self.setWindowTitle("设置")
        self.resize(874, 700)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self)
        self.verticalLayout_17.setObjectName("verticalLayout_17")

        self.scrollArea = QtWidgets.QScrollArea(self)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, -3, 837, 695))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.groupBox = QtWidgets.QGroupBox("主题", self.scrollAreaWidgetContents)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_2.addWidget(self.groupBox)
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")

        self.widget = QtWidgets.QWidget(self.groupBox)
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setMaximumSize(22, 22)
        theme_icon = QtGui.QPixmap(":/setting/light/theme.png")
        self.label.setPixmap(theme_icon)
        self.label.setScaledContents(True)
        self.iconlist.append((self.label, 'theme.png'))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton = TogolButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.widget)

        self.scrollspacerbottom = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(self.scrollspacerbottom)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_17.addWidget(self.scrollArea)

    def create_widget_l(self, parent, icon: str, title: str, content: str):
        widget = QtWidgets.QWidget(parent)
        widget.setObjectName("widget")
        hlayout = QtWidgets.QHBoxLayout(widget)
        vlayout  = QtWidgets.QVBoxLayout()
        vlayout.setContentsMargins(0, 0, 0, 0)

        icon_label = QtWidgets.QLabel(widget)
        icon_label.setObjectName("label")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(icon_label.sizePolicy().hasHeightForWidth())
        icon_label.setPixmap(QtGui.QPixmap(f":/setting/light/{icon}"))
        icon_label.setScaledContents(True)
        icon_label.setFixedSize(22, 22)

        self.iconlist.append((icon_label, icon))

        hlayout.addWidget(icon_label)
        hlayout.addLayout(vlayout)
        title_label = QtWidgets.QLabel(title, widget)
        title_label.setObjectName("title_label")
        sizePolicy.setHeightForWidth(title_label.sizePolicy().hasHeightForWidth())
        vlayout.addWidget(title_label)
        content_label = QtWidgets.QLabel(widget)
        content_label.setText(content)
        content_label.setObjectName("content_label")
        vlayout.addWidget(content_label)
        return widget

    def create_widget_lr(self, parent, icon: str, btn_name: str, btn_do: Callable = None):
        widget = QtWidgets.QWidget(parent)
        widget.setObjectName("widget")
        hlayout = QtWidgets.QHBoxLayout(widget)
        widget.setLayout(hlayout)
        icon_label = QtWidgets.QLabel(widget)
        icon_label.setObjectName("label")
        icon_label.setPixmap(QtGui.QPixmap(f":/setting/light/{icon}"))
        icon_label.setScaledContents(True)
        icon_label.setFixedSize(22, 22)
        self.iconlist.append((icon_label, icon))
        hlayout.addWidget(icon_label)
        hlayout.addSpacerItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum))
        button = QtWidgets.QPushButton(btn_name, widget)
        button.setObjectName("button")
        hlayout.addWidget(button)
        if btn_do is not None: button.clicked.connect(btn_do)
        return widget

    def create_widget_lcr(self, parent, icon: str, title: str, content: str, btn_name: str, btn_do: Callable = None, signal:pyqtSignal = None):
        widget = QtWidgets.QWidget(parent)
        widget.setObjectName("widget")
        hlayout = QtWidgets.QHBoxLayout(widget)
        vlayout  = QtWidgets.QVBoxLayout()
        widget.setLayout(hlayout)
        icon_label = QtWidgets.QLabel(widget)
        icon_label.setObjectName("label")
        icon_label.setPixmap(QtGui.QPixmap(f":/setting/light/{icon}"))
        icon_label.setScaledContents(True)
        icon_label.setFixedSize(22, 22)
        self.iconlist.append((icon_label, icon))
        hlayout.addWidget(icon_label)
        hlayout.addLayout(vlayout)
        title_label = QtWidgets.QLabel(widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(title_label.sizePolicy().hasHeightForWidth())
        title_label.setText(title)
        title_label.setObjectName("title_label")
        vlayout.addWidget(title_label)
        content_label = ElidedLabel(widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(content_label.sizePolicy().hasHeightForWidth())
        content_label.setText(content)
        content_label.setObjectName("content_label")
        vlayout.addWidget(content_label)
        button = QtWidgets.QPushButton(btn_name, widget)
        button.setObjectName("button")
        button.setFixedSize(100, 30)
        hlayout.addWidget(button)
        if btn_do is not None: button.clicked.connect(lambda:btn_do(content_label, signal))
        return widget

    def resizeEvent(self, event):
        """窗口大小变化时更新最小尺寸"""
        super().resizeEvent(event)

